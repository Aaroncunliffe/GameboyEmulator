
--- My notes about the emulator development from the ground up and testing with tetris, this is the first todo, but will have 1 for each game i test to track any issues I run into ----

CPU

1. All XOR instructions

2. WHY IS ADD 16 bit registers marked as TODO... I must've forgotten something or left that in
3. Need to enable interupts on reti instruction
4. Pay attention to SIGNED or UNSIGNED immediate values -> and how this effects flags - Jump to a RELATIVE address is always signed, so it can jump forwards or backwards


DISPLAY

-- WARNINGS --
1. Flags may not be set correctly, especially carry / half-carry for subtracts
2. Stack may start 1 too short of the end of the stack.


How to decide which opcode table to use? CB or Normal?

16/06/2017:
- Ordering of low and high bytes, if it effects jumps?
- Be careful of missing else' to reset flags, also for missing '~', using 'big' instead of 'flag' and mixing wrong flags.
- Got up to PC 0x0322 which is CALL 7FF3. up until this point, all data matches No$gmb

18/06/2017:
- Display maps,
- Need to write to IO regs in the array as well as the specific variables inside display

09/07/2017:
- Display granted access to MMU, might not be required, display class can access its own VRAM, including display registers

18/07/2017:
- Demo plays for only a split second, begins to execute just after instruction held at 048C. I need to find out what calls this instruction
- Call to 2874, upon return from that, screen is white.
- if hit 0560 went too far, this runs at the END of the demo being canceled not at the beginning
- Jump from RST28 to 04E6

Important instructions
2816 - after 048C, not during splash,
04D3
2387

- 2A0A


instructions ran:
20029364

Memory locations of note:

FFE2 = C6? 

There is definitely something triggering it to re-write the old tileset and return to titlemenu, just unsure of what,
glitchyness is probably expected.


If data in FFC6 == 0 then jump to 048C to start process of changing screen
04EF is the check and then jump to 048C


// Need to do palletes for backgrounds and sprites
// Input DEFINITELY being misinterpreted

27/07/2017
After first block hits the floor in the demo, loop starts. Need to see why

28/07/2017
Never jumps back from instruction 0x21B4

29/07/2017

First block runs instruction 4 times 0x2621 abd 2nd block calls 3 times, my emulator alters the position of the map after the 3 times, not sure why.
Also need todo bacground properly and palettes


30/07/2017 - TODO:
1. Palettes for background and sprites, Need to look at javascript emulation guide to finish background drawing.
2. Input for keyboard, use #defines for mapping keys for now.
3. Try to fill out CB opcode table, a lot of functions there and working but just need to fill out for each possible use, 

31/07/2017 
- Now gets to the game selection screen
- For some reason, doesnt register as showing through background so sprites arent shown on that screen
When down button pressed, 0xCBDE is called


01/08/2017
- B key now works
- Down key now works
- A lot of CB functions implemented
- When a line is completed after flashing and vanishing the game crashes.
        pc = 0x2262 is only hit after a line is completed, Track from there, see what goes wrong. (completes flashing then display messes up, gameplay continues though)

03/08/2017 - Tracking down bug after completing line

0x2245 is hit only when a block hits the floor

0x2252 loads value at address regs.DE.word into A, A &= A, if result zero, jump away, if a line is made, 0xCA is the value read from regs.DE.word
    0x2256 first is hit only when a line is complete (After above checks)
    When a row is complete, tile 0x8C is used to flash where the line to be removed is, it flashes 3 times, then on the 4th time the blocks are shifted down#

Possible cause of error - Something sets LCDC to 0x00...
Update Tileset code resets LCDC, no idea why, after write to addr 0x9846 (VRAM)

Need to fix error with MMU, IORegs reads and writes are also attempted to be written to HRAM

### FIX: Tileset array is [384] in length, An instruction writing to VRAM 9FFF translates to tile [388], this inadvertently set LCDC to 0
         I forced a check that the updateTileset function was only called if vram address was actually tile data.


---- General tetris notes ----

pc 0x0218 appears to be the main game loop, many calls to other locations



---- Big TODO's ----
1. Save files
2. DAA instruction