
None of the test roms output to the screen OR write to the serial register.

Never gets past the check at 0xC084

RR instruction incorrect.


11/09/17:

- Fixed issue with RRA instruction, where it was not placing the carry value into bit 7 of the register.

- Hits instruction 0xC084 twice with the correct registers, on 3rd hit the registers are wrong

- Doesnt hit instruction 0xC0CD more than once, it should

- Fixed issue with RR and RL instructions, carry was being set to the value AFTER the shift not before.

- Fixed MASSIVE oversight, when CALLING depending on flag condition, pushed CURRENT instructions address to the stack, not the next instruction.
  - After fixing the above, prints the first character to the console window. doesn't progress any further

- Fixed SUB function did not set carry flag properly. Was comparing flags register rather than A register. (Same bug existed in other maths functions)
  - Now prints the test name to the screen and gets stuck

 NOTE: One of the above changes also fixed the scoreboard issue in tetris. Tetris is now completely playable apart from DAA instruction (scores are still HEX)


 14/9/17:
-- ADD A,10 --- 
0xC6B8 JR NZ, C659
0xC6BA RET (Returns to C4E3)

The add 10 to A relies on the unsigned value wrapping around to 0,
There was a problem with testing whether to set the zero flag after an addition has been completed. fixed.
I'm not confident logic for setting the flags for any arithmetic operations is correct, this needs to be tested

C18B called just before the word passed appears on the screen

Return at 0xC6BA returns to 0x93C which is never hit in BGB and causes an infinate loop

Register values at the instructions leading up to 0xC6BA are incorrect, HL has value of 0x0000, and that is loaded into the stack pointer, and causes issues.

0xC67D is the last instructions where the values match up

Issue with 0x08() // LD (a16), SP. accidentally loaded value at address into stack pointer. Now gets a result from the test!

- Test 7 failures
    - 0xCC - tried to shift by ZERO_FLAG not ZERO_BIT. This is a bad system for conditional jumps and calls can skip shifting and just compare to the expected value.
    - 0cDC - Call operation that wasn't pushing the right address. Was a previously found bug that was missed for this one instruction.



----- BIOS -----

Bios sits in the rom in place 0x0000 - 0x00FF needs access to the rom higher than this.

- Issue with RR checking for carry flag in AF.high not low.

- RL 0x80 is bit 7 not 0x08.